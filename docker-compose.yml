version: "3.9"

services:

  # Reverse proxy
  nginx:
    platform: linux/amd64
    image: nginx
    container_name: local_nginx
    volumes:
      - ./reverse_proxy.conf:/etc/nginx/nginx.conf
    ports:
      - "8080"

  # Databases
  customers-db:
    image: mysql/mysql-server:8.0.25
    container_name: customers-db
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 45s
      interval: 10s
      retries: 10
    env_file:
      - ./env/customers.env
    ports:
      - "3306"
    volumes:
      - customers-data:/var/lib/mysql

  items-db:
    image: mysql/mysql-server:8.0.25
    container_name: items-db
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 45s
      interval: 10s
      retries: 10
    env_file:
      - ./env/items.env
    ports:
      - "3306"
    volumes:
      - items-data:/var/lib/mysql

  orders-db:
    image: mysql/mysql-server:8.0.25
    container_name: orders-db
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 45s
      interval: 10s
      retries: 10
    env_file:
      - ./env/orders.env
    ports:
      - "3306"
    volumes:
      - orders-data:/var/lib/mysql

  # Java services
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:8080"
    container_name: web-service
    environment:
      ITEMS_SERVICE_URL: http://items-service:8080/
      CUSTOMERS_SERVICE_URL: http://customers-service:8080/
      ORDERS_SERVICE_URL: http://orders-service:8080/
    env_file:
      - ./env/customers.env

  customers:
    build:
      context: ./customers
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080"
    depends_on:
      customers-db:
        condition: service_healthy
    container_name: customers-service
    environment:
      MYSQL_HOST: customers-db
    env_file:
      - ./env/customers.env

  items:
    build:
      context: ./items
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080"
    depends_on:
      items-db:
        condition: service_healthy
    container_name: items-service
    environment:
      MYSQL_HOST: items-db
    env_file:
      - ./env/items.env

  orders:
    build:
      context: ./orders
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080"
    depends_on:
      orders-db:
        condition: service_healthy
    container_name: orders-service
    environment:
        MYSQL_HOST: orders-db
        ITEMS_SERVICE_URL: http://items-service:8080/
        CUSTOMERS_SERVICE_URL: http://customers-service:8080/
    env_file:
      - ./env/orders.env

volumes:
  customers-data:
  items-data:
  orders-data: